import os
import google.generativeai as genai
from PIL import Image
import io

# Load the master prompt from the text file
try:
    with open("prompts/react_tailwind_prompt.txt", "r") as f:
        PROMPT = f.read()
except FileNotFoundError:
    print("Error: prompts/react_tailwind_prompt.txt not found. Make sure the file exists.")
    PROMPT = "" # Fallback to empty prompt if file is missing

def configure_genai():
    """Configures the Generative AI model."""
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("GOOGLE_API_KEY environment variable not set.")
    genai.configure(api_key=api_key)

async def generate_code_from_image(image_bytes: bytes) -> str:
    """
    Generates React code from an image using the Gemini Vision model.

    Args:
        image_bytes: The image file in bytes.

    Returns:
        The raw markdown text generated by the model.
    """
    try:
        configure_genai()
        # --- THIS IS THE FINAL CORRECTED LINE ---
        # Using a model name confirmed to be available by the diagnostic script.
        model = genai.GenerativeModel('gemini-flash-latest')
        
        # Prepare the image for the API
        img = Image.open(io.BytesIO(image_bytes))
        
        # Prepare the content payload for the model
        content = [PROMPT, img]

        # Call the model
        response = await model.generate_content_async(content)
        
        # Check for safety ratings and blocked responses
        if not response.parts:
            if response.prompt_feedback and response.prompt_feedback.block_reason:
                 return f"Error: The response from the AI was blocked. Reason: {response.prompt_feedback.block_reason.name}"
            return "Error: The response from the AI was empty or blocked, possibly due to safety settings."
            
        return response.text
    except Exception as e:
        print(f"An error occurred in vision_service: {e}")
        return f"Error: Could not generate code from the image. Details: {str(e)}"